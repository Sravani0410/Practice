latest 2023 javascripts concepts:https://www.freecodecamp.org/news/the-biggest-changes-in-javascript-this-year

# Javascript:
============
ðŸ’¡ Javascript is a large topic and a lot of frontend interviews will go in-depth on this topic.

JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.

For a general list of topics, follow this Github repo: [Link](https://github.com/albseb511/fsd/blob/master/javascript.md)
Quiz for Javascript: [Link](https://ydkjs-exercises.com/)

</aside>

### Fundamentals:

- [ ]  What is the difference between Java and Javascript? (a lot of people think its the same thing)

[Introduction - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction#javascript_and_java)

JavaScript and 	Java diffreences:
   -Javascript: Java is a weakly typed language,so the variable can be declared where they are used
                 It is Object-based scripting language. we can use as any web page which make dynamic using html and css 
                 it is interpreted language it means code will run line by line complie and exceute.
                 In javascript debugging is easy to compare to java
                 Object are prototype based.
                 it has a file extension ".js"
                No distinction between types of objects. 
                Inheritance is through the prototype mechanism, and properties and methods can be added to any object dynamically.	
   -Java:  Java is a strongly typed language,so the variable should be declared first before using in the program 
           It is Object-oriented programming language.we can make programs we can run in computer and mobiles.
           It is compiled language. when overall code to convert to machine code then it will exceute.
           It is effiecient and fast compare to javascript
           Objects of java are Class-based, so you can't create any program in java without developing a class.
           it has a file extension ".Java"
           Objects are divided into classes and instances with all inheritance through the class hierarchy. 
          Classes and instances cannot have properties or methods added dynamically.
   -Javascript: Variable data types are not declared (dynamic typing, loosely typed).	
   -Java: Variable data types must be declared (static typing, strongly typed).
   -Javascript: Cannot automatically write to hard disk.	
   -Java: Can automatically write to hard disk.

- [ ]  What are the different primitive data types in JS?
           There are 2 types of data types: Primitive values and Reference values
              Primitive values : Numbers,Strings,Booleans,Undefined,Null
              Reference values : Arrays,Objects,Functions

- [ ]  What is the difference between null, undefined, and NaN?
       NaN: Not a number: As the name implies, it is used to denote that the value of an object is not a number. 
            There are many ways that you can generate this error, one being invalid math opertaions such as 0/0 or sqrt(-1)
       undefined: It means that the object doesn't have any value, therefore undefined. 
                  This occurs when you create a variable and don't assign a value to it.
       null: It means that the object is empty and isn't pointing to any memory address.
===================================================================================================================
- [ ]  What are higher-order functions? What are callbacks?
        Higher-order functions and callbacks are concepts often used in functional programming and JavaScript.
        Let's explore each of these concepts in detail:
        Higher-Order Functions:
        ======================
        A higher-order function is a function that either takes one or more functions as arguments or returns a function as its result.
        In other words, a function is considered "higher-order" if it operates on functions by taking them as arguments or returning them.

        Examples of Higher-Order Functions:
        Functions that take a function as an argument:
        function map(arr, fn) {
        const result = [];
        for (const item of arr) {
            result.push(fn(item));
        }
        return result;
        }

        const numbers = [1, 2, 3, 4, 5];
        const squaredNumbers = map(numbers, function (num) {
        return num * num;
        });

        console.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]
        In this example, the map function takes an array and a function (fn) as arguments. 
        It applies the provided function to each element of the array and returns a new array with the results.

        Functions that return a function:
        function multiplier(factor) {
        return function (number) {
            return number * factor;
        };
        }
        const double = multiplier(2);
        console.log(double(5)); // Output: 10
        In this example, the multiplier function returns another function. 
        The returned function, when called, multiplies its argument by the factor provided to the outer function.

        Callbacks:
        =========
        A callback is a function passed as an argument to another function, and it is executed after the completion of some operation.
        Callbacks are commonly used in asynchronous programming, event handling, and higher-order functions.

        Examples of Callbacks:
        Callback in Asynchronous Code:
        =============================
        function fetchData(url, callback) {
        // Simulating an asynchronous operation (e.g., AJAX request)
        setTimeout(function () {
            const data = { name: 'John', age: 30 };
            callback(data);
        }, 1000);
        }

        fetchData('https://api.example.com/data', function (result) {
        console.log(result); // Output: { name: 'John', age: 30 }
        });
        In this example, the fetchData function takes a URL and a callback function as arguments. 
        It simulates an asynchronous operation and calls the callback with the result once the operation is complete.

        Callback in Event Handling:
        ===========================
        const button = document.getElementById('myButton');
        function handleClick() {
        console.log('Button clicked!');
        }

        button.addEventListener('click', handleClick);
        Here, handleClick is a callback function passed to the addEventListener method.
        It will be called when the button is clicked.

        Relationship between Higher-Order Functions and Callbacks:
        ==========================================================
        -Higher-order functions often involve the use of callbacks.
        -When a function takes another function as an argument, that function can be considered a callback. 
        -For example, in the map function from the earlier example, the provided function (fn) is a callback.
        -In summary, higher-order functions and callbacks are fundamental concepts in JavaScript that enable flexible and expressive programming,
        especially in scenarios involving asynchronous operations, event handling, and functional programming paradigms.

======================================================================================================================

- [ ]  Arrays
    - [ ]  What are the different ways to initialise an Array?
            -In JavaScript, you can initialize an array using various methods. Here are some common ways:
                1.Array Literal: let arr1 = [1, 2, 3, 4, 5];
                2.Array Constructor: let arr2 = new Array(1, 2, 3, 4, 5);
                3.Using the Array.from method: let arr3 = Array.from({ length: 5 }, (_, index) => index + 1);
                4.Using a loop for dynamic initialization: let arr4 = [];
                                                            for (let i = 1; i <= 5; i++) {
                                                                arr4.push(i);
                                                            }
                5.Using the fill method: let arr5 = new Array(5).fill().map((_, index) => index + 1);
            - Each of these methods has its use case. The array literal and array constructor are straightforward and commonly used. 
            - The Array.from method allows you to create an array from an iterable or array-like object. 
            - The loop and fill method are useful for dynamic initialization based on specific conditions or computations.
    - [ ]  How can you make 2D, 3D array?
             // Initialize a 2D array with 3 rows and 4 columns
                    let twoDArray = [
                        [1, 2, 3, 4],
                        [5, 6, 7, 8],
                        [9, 10, 11, 12]
                    ];

                    // Accessing elements in a 2D array
                    console.log(twoDArray[1][2]); // Output: 7
            // Initialize a 3D array with 2 layers, each layer having 3 rows and 4 columns
                    let threeDArray = [
                        [
                            [1, 2, 3, 4],
                            [5, 6, 7, 8],
                            [9, 10, 11, 12]
                        ],
                        [
                            [13, 14, 15, 16],
                            [17, 18, 19, 20],
                            [21, 22, 23, 24]
                        ]
                    ];

                    // Accessing elements in a 3D array
                    console.log(threeDArray[1][2][3]); // Output: 24


    - [ ]  common array methods, ( forEach, map, filter, reduce )
             -https://betterprogramming.pub/5-array-methods-to-know-by-heart-d298c7009999
    - [ ]  Can you create, transpose a matrix. etc?
    - [ ]  What is the difference between .forEach and .map
- [ ]  Objects
    - [ ]  How are objects different from arrays?
    - [ ]  Loop through objects
    - [ ]  Retrieve keys and values from an object?
- [ ]  What does `this` keyword do? Explain in detail. ( 5 minutes )

[You-Dont-Know-JS/this & object prototypes at 1st-ed Â· getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS/tree/1st-ed/this%20%26%20object%20prototypes)

- [ ]  What are constructors?
- [ ]  What is hoisting? How does hoisting work?
https://medium.com/@livajorge7/hoisting-in-javascript-understanding-how-it-works-d7e3be67c238
https://blogs.ayushdev.com/hoisting-in-javascript-understanding-the-mechanism-and-best-practices
[Hoisting - MDN Web Docs Glossary: Definitions of Web-related terms | MDN](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting)

- [ ]  What are the different types of scopes? What are the differences?

[You-Dont-Know-JS/ch1.md at 2nd-ed Â· getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/ch1.md)

- [ ]  Explain closures.
- [ ]  What is debouncing? What is throttling? Implement a simple solution on the frontend.

[Closures - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures)

[You-Dont-Know-JS/scope-closures at 2nd-ed Â· getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/scope-closures)

[You-Dont-Know-JS/scope & closures at 1st-ed Â· getify/You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS/tree/1st-ed/scope%20%26%20closures)

- [ ]  What is lexical Scoping?
- [ ]  What is the Execution Context? Explain
- [ ]  How can you do recursion in javascript?
- [ ]  What is the DOM API?
- [ ]  How does a browser work?

[Populating the page: how browsers work - Web Performance | MDN](https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work)

- [ ]  What are some ways to measure performance on the web?

[Web Performance | MDN](https://developer.mozilla.org/en-US/docs/Web/Performance)

- [ ]  What are events in javascript?

[Event - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/Event)

[Introduction to events - Learn web development | MDN](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events)

- [ ]  How can you create your own events?

[Creating and triggering events - Event reference | MDN](https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events)

- [ ]  What is event propagation, event bubbling, event capturing, event delegation?

[Event Delegation](https://davidwalsh.name/event-delegate)

- [ ]  Give an example of how event bubbling causes an issue in a web application, and how you can solve it?
- [ ]  What is callback hell?
- [ ]  What is XHR / AJAX?
- [ ]  What is an API?
- [ ]  What are Browser APIs?
- [ ]  Explain what setInterval and setTimeout are? How do they work?
- [ ]  Is javascript single-threaded?
- [ ]  How does JavaScript handle asynchronous behavior?
- [ ]  What is the event loop?

[What the heck is the event loop anyway? | Philip Roberts | JSConf EU](https://www.youtube.com/watch?v=8aGhZQkoFbQ)

- [ ]  Explain event loop visually. with the help of a call stack, task queue, and heap?
- [ ]  What is heap? Show it on the web browser where the heap is.
- [ ]  What is a call stack?
- [ ]  What is stack overflow ( not the website )?
- [ ]  What are promises?
- [ ]  Write a function called sleep that accepts the time in milliseconds will return a promise which will resolve after the amount of time, if the input is not a valid number, then reject the promise?
======================================================================================================================================
- [ ]  What is async await? how is it different from promises?
          -  async/await is a feature in JavaScript that simplifies asynchronous programming. 
          -  It is built on top of promises and provides a more concise syntax for handling asynchronous operations. 
          -  The async keyword is used to define a function that returns a promise,
             and the await keyword is used to wait for a promise to settle (either fulfilled or rejected) before continuing the execution of the code.

            Here's a brief overview of async/await and how it differs from promises:

          -  Syntax:

            With Promises:
            somePromiseFunction()
            .then(result => {
                // do something with the result
            })
            .catch(error => {
                // handle the error
            });
            With Async/Await:
            async function someAsyncFunction() {
            try {
                const result = await somePromiseFunction();
                // do something with the result
            } catch (error) {
                // handle the error
            }
            }
          -  Error Handling:
            Promises use .then() for handling successful outcomes and .catch() for handling errors.
            Async/Await uses try/catch for error handling, which can make the code look more synchronous and improve readability.
          -  Readability:
            Async/Await tends to produce more readable and concise code, especially for complex asynchronous operations. It avoids the "callback hell" problem associated with chaining multiple .then() calls.
          -  Return Value:
            Promises return a promise object immediately, and you chain .then() and .catch() methods to handle the results.
            Async/Await allows you to write asynchronous code in a way that looks and behaves more like synchronous code. The result of the asynchronous operation can be assigned directly to a variable using the await keyword.
          -  Here's a simple example to illustrate the difference:
            // Using Promises
            function getData() {
            return fetch('https://api.example.com/data')
                .then(response => response.json())
                .then(data => console.log(data))
                .catch(error => console.error(error));
            }

            // Using Async/Await
            async function getDataAsync() {
            try {
                const response = await fetch('https://api.example.com/data');
                const data = await response.json();
                console.log(data);
            } catch (error) {
                console.error(error);
            }
            }
           - In the Async/Await example, the code looks more synchronous, making it easier to understand the flow of execution. 
           - However, both approaches achieve the same result. 
           - Async/Await is essentially syntactic sugar on top of promises, providing a more elegant and readable way to work with asynchronous code.
            =================================================================================================================================
- [ ]  How does fetch work? How is it different from axios?
- [ ]  What are the advantages of using promises? What issue is it solving?
- [ ]  What is CORS?

[CORS in 100 Seconds](https://www.youtube.com/watch?v=4KHiSt0oLJ0)

- [ ]  what is jquery? who made it? ( check it out of curiosity )

[John Resig - JavaScript Programming](https://johnresig.com/)

- [ ]  What is IIFE? Why was that pattern used?
- [ ]  What are anonymous functions?
- [ ]  What are Sets?
- [ ]  What are Maps? How are maps different from objects?
- [ ]  What is esmodules? What is commonjs?
- [ ]  Explain the difference between localStorage, sessionStorage and cookies?
- [ ]  What is ECMAScript? What is TC-39?
- [ ]  What is polyfilling? Why do we need to do that?
- [ ]  Explain HTTP Protocols
- [ ]  What is TCP
- [ ]  Explain Client-Server Model
- [ ]  What is the OSI layers?
- [ ]  What is REST API?
- [ ]  What is GraphQL? How is it different from REST API?
- [ ]  What is Webpack, Snowpack?
- [ ]  What is tree shaking?
- [ ]  What is Hot Module Reloading?
- [ ]  **What is the prototype chain?**
- [ ]  How are concepts of inheritance applied in Javascript?
- [ ]  What are classes in javascript? How are they different from the prototype chain?
- [ ]  Can you implement the following using prototype chain and classes:
    - [ ]  Create your own Array data structure using prototype chain
    - [ ]  Create the following higher-order functions in an array:
        - [ ]  forEach
        - [ ]  map
        - [ ]  reduce
        - [ ]  filter
    - [ ]  Stack
    - [ ]  Queue
    - [ ]  Linked List ( LL )
    - [ ]  Doubly LL
    - [ ]  Tree
        - [ ]  Binary Tree
    - [ ]  Graph ( DFS, BFS )
- [ ]  What are generators? What does yield do?
- [ ]  Show an application of generators as an alternative to async-await?
- [ ]  What is call, apply, bind? Give an example where you have to use bind?

---

### ES6+

---

- [ ]  What is var, let const? Explain in detail
- [ ]  What are the differences between them?
    - [ ]  Explain differences with syntax, declaration, assignment, scopes.
- [ ]  What is TDZ in let?
- [ ]  What are the gotcha moments in const?

[let - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let)

[const - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const)

- [ ]  What are mutability and immutability? Explain
- [ ]  Explain ES6+ concepts?
    - [ ]  arrow functions? What are they solving?
    - [ ]  Show an example where something goes wrong in normal functions and works more intuitively in arrow functions?
    - [ ]  template literals
    - [ ]  destructuring
    - [ ]  default params
    - [ ]  spread and rest operators
    - [ ]  Promise
    - [ ]  Classes
- [ ]  Explain what are getters and setters?
- [ ]  What is BigInt?
- [ ]  What is Optional Chaining?