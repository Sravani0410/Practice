1. What are Models?
    - A constructor is a blueprint using which we can create objects. Similarly, using the Model we create documents (collection of a particular database of MongoDB).
    - So, the model is a constructor function.
    - **Syntax ⇒**
        mongoose.model(NameoftheCollection, SchemaoftheCollection)
        This function returns the **Mongoose object.**
        
- **What are aggregation pipelines?**
    - It is a way provided by MongoDB to perform aggregation.
    - The aggregation pipeline has various stages and each stage transforms the document.
    - It is a multi-stage pipeline. In each stage, the documents are taken as input and produce the resultant set of documents now in the next stage ( id is available ) the resultant documents are taken as input and produce output, this process is going on till the last stage.
    - The basic pipeline stages provide filters that will perform like queries and the document transformation modifies the resultant document and the other pipeline provides tools for grouping and sorting documents.
    - **Example ⇒**
        - Find all the small-size pizzas with prices> 16
             db.orders.aggregate([{$match : {size : "small",price : {$gt:16}}}])
            
            **$match:** It is used for filtering the documents and can reduce the number of documents that are given as input to the next stage
            
            the **aggregate()** function is used to perform aggregation
-lookup:https://www.geeksforgeeks.org/mongodb-lookup-using-node-js/
-populate:https://codeforgeek.com/populate-in-mongoose/
- **Explain why a mongoose does not return a promise but has a .then?**
    - Mongoose provides a way to define and interact with MongoDB collections in a more structured and consistent manner than using MongoDB directly.
    - It does not return Promises directly, but it does provide support for Promises through its underlying Promise library, and its fluent API and chaining syntax aim to provide a more consistent way to work with MongoDB collections.
    - Mongoose is primarily designed for use in a synchronous, object-oriented programming style, rather than a functional programming style with Promises. By providing a fluent API and supporting synchronous chaining, Mongoose aims to make it easier for developers to work with MongoDB collections in a structured and consistent manner, without having to deal with the complexities of asynchronous programming and Promises.
- I'm using an arrow function for a virtual, middleware, getter/setter, or method and the value of this is wrong. Why?
- Should I create/destroy a new connection for each database operation?
- My query/update seems to execute twice. Why is this happening?
- How do you create indexes with mongoose?
- What are pre and post-hooks?